quarkus.arc.fail-on-intercepted-private-method=false


## Additional index dependencies
quarkus.index-dependency.jaxrs.group-id=jakarta.ws.rs
quarkus.index-dependency.jaxrs.artifact-id=jakarta.ws.rs-api

## Name and description
alw.id=apicurio-api-lifecycle-workflows
alw.name=Apicurio API Lifecycle Workflows (In Memory)
alw.description=Apicurio project that provides workflow functionality for the API Lifecycle management project.
alw.version=${project.version}
alw.date=${timestamp}

## Auth - disabled by default
alw.auth.enabled=false
alw.auth.url=
alw.auth.client-id=

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${alw.auth.enabled}
quarkus.oidc.auth-server-url=${lifecycle_AUTH_URL_CONFIGURED:${alw.keycloak.url}/realms/${alw.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:lifecycle-api}

quarkus.http.non-application-root-path=/

## Logging
quarkus.log.console.format=%d{YYYY-MM-dd HH:mm:ss} %p [%C] (%t) %m%n
quarkus.log.console.color=false
quarkus.log.min-level=TRACE
quarkus.log.level=INFO
quarkus.log.category."io.apicurio".level=${ALW_LOG_LEVEL:INFO}

## Max HTTP request body size (large files needed to support Import functionality)
## (Set to 50MB)
quarkus.http.limits.max-body-size=52428800

# Access logs
quarkus.http.access-log.enabled=${ALW_ENABLE_ACCESS_LOG:true}
quarkus.http.access-log.pattern="apicurio-alw.access method="%{METHOD}" path="%{REQUEST_URL}" response_code="%{RESPONSE_CODE}" response_time="%{RESPONSE_TIME}" remote_ip="%{REMOTE_IP}" remote_user="%{REMOTE_USER}" user_agent="%{i,User-Agent}""

# Override the hostname used for generating externally-accessible URLs.
# The host and port overrides are useful when deploying with HTTPS passthrough Ingress or Route.
# In cases like these, the request URL (and port) that is then re-used for redirection
# does not belong to the actual external URL used by the client, because the request is proxied.
# The redirection then fails because the target URL is not reachable.
alw.url.override.scheme=
alw.url.override.host=
alw.url.override.port=

quarkus.http.proxy.proxy-address-forwarding=${ALW_PROXY_ADDRESS_FORWARDING:false}

## Include or exclude the stack trace in REST API error responses.
alw.api.errors.include-stack-in-response=${ALW_INCLUDE_STACKTRACE_IN_ERROR:false}

## Enable CORS always
quarkus.http.cors=true
quarkus.http.cors.origins=${CORS_ALLOWED_ORIGINS:http://localhost:8888,http://127.0.0.1:8888}
quarkus.http.cors.methods=${CORS_ALLOWED_METHODS:GET,PUT,POST,PATCH,DELETE,OPTIONS}
quarkus.http.cors.headers=${CORS_ALLOWED_HEADERS:access-control-request-method,access-control-allow-credentials,access-control-allow-origin,access-control-allow-headers,authorization,content-type}

## Disable Quarkus proactive authentication
quarkus.http.auth.proactive=false

## Disable OpenAPI class scanning
mp.openapi.scan.disable=true
mp.openapi.servers=/api


# Common components properties
app.name=${alw.id}
app.description=${alw.description}
app.version=${alw.version}
app.date=${alw.date}

